####

#### 如果检测到Broker宕机，NameServer并不会立刻通知Producer，这是为什么？


#### RocketMQ线程模型

#### NameServer启动流程
> 1.读取配置  
> 2.创建NameServer控制器【都能控制啥？】
> 3.创建NettyServer，然后开启2个定时任务，一个用于对Broker的弹活，一个负责记录KV配置（KV配置中有什么）。
> 4.注册JVM钩子，监听JVM退出事件(Runtime.getRuntime().addShutdownHook())。

#### NameServer探活流程
> 1.Broker和NameServer是通过heartbeat机制实现注册的。Broker启动后每隔30s会向所有的NameServer发送heartbeat包
> 2.NameServer收到的heartbeat后，会更新自身的livedBrokerTable中该Broker对应的lastUpdateTime，更新最后一次收到的心跳时间
> 3.NameServer每隔10s会扫描一次livdBrokerTable，检测超过120s没有更新的Broker，发现后将其移出队列，并关闭Socket连接。

#### NameServer注册流程
> 1.判断Broker所属的cluster是否存在，若不存在则先创建cluster，然后将Broker放入其中（RouteInfoManager.java）。
> 2.维护BrokerData信息，将BrokerData信息放入到brokerAddrTable中（brokerAddrTable记录了broker的基本信息，包括名字，所属集群，主备地址）
> 3.如果注册的是一个MasterBroker，填充到topicQueueTable中，为默认主题创建路由信息；如果是一个Slave节点，则找到对应的MasterBroker，并更新masterAddr属性
> 4.更新Broker的存活时间
> 5.注册Broker过滤器的Server地址列表？

#### NameServer删除流程
> 触发点有2个：① NameServer内部定时扫描，踢除超过120s无heartbeat的Broker；② Broker正常关闭时会请求NameServer，调用unregisterBroker。
> 1.申请写锁
> 2.删除Broker节点的信息
> 3.将要删除的Broker从cluster中踢除
> 4.将要删除的Broker从对应的Topic中踢除
> 5.释放写锁

#### NameServer路由流程
> NameServer的节点变动不会实时的push给客户端，而是等待它们主动来pull。【这么设计的好处是什么呢？】

#### MQ消息发送模式中，Asyn模式和Oneway模式的区别
> Asyn发生完成后，会感知到成功或失败；【Asyn模式会明确知道发送结果，如果发送失败会再回调前再次重试】而Oneway模式不会感知。

#### 消息队列如何实现负载

#### 消息队列如何实现高可用

#### 批量发送消息如何保证一致性

#### RocketMQ中的Message结构
> Message内部基本属性只有Topic、flag、properties和body四个字段，其中基本属性只有Topic和flag，其他类似tags、keys这些常用的属性放在properties中，真正的消息体内容存在body中。

#### Producer启动流程(DefaultMQProducerImpl.start())
> 1.基本校验：检查producerGroup是否符合要求，改变intanceName
> 2.创建MQClientInstance实例，并注册到MQClientManager中
> 3.启动MQClientInstance 【MQClientInstance的启动流程留个FollowUp】

#### Producer发送消息基本流程（DefautlMQProducer.sendMessage）【TODO】
> 1.消息验证：必填字段非空校验，例如Topic和消息体不能为空，消息长度小于4M，检查Producer的运行状态。
> 2.查找路由Topic信息：先判断本地缓存中是否有Topic缓存信息，如果没有则到NameServer查询【P58，还有一些细节不懂，先跳过】。
> 3.选择路由消息队列
> 4.进行发送（区分同步、异步、单向）